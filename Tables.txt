CREATE TABLE  "ADMIN" 
   (	"USERNAME" VARCHAR2(20), 
	"PASSWORD" VARCHAR2(20)
   ) ;
CREATE TABLE  "CUSTOMER" 
   (	"CUST_ID" VARCHAR2(20) NOT NULL ENABLE, 
	"EMAIL" VARCHAR2(40) NOT NULL ENABLE, 
	"PHONE" NUMBER(*,0) NOT NULL ENABLE, 
	"NAME" VARCHAR2(40) NOT NULL ENABLE, 
	"ADDRESS" VARCHAR2(40) NOT NULL ENABLE, 
	"PASSWORD" VARCHAR2(15) NOT NULL ENABLE, 
	 PRIMARY KEY ("CUST_ID", "EMAIL", "PHONE") ENABLE
   ) ;
CREATE TABLE  "SHOPKEEPER" 
   (	"EMAIL" VARCHAR2(40) NOT NULL ENABLE, 
	"S_ID" VARCHAR2(10) NOT NULL ENABLE, 
	"PHONE" VARCHAR2(10) NOT NULL ENABLE, 
	"ADDRESS" VARCHAR2(40) NOT NULL ENABLE, 
	"NAME" VARCHAR2(15) NOT NULL ENABLE, 
	"PASS" VARCHAR2(15) NOT NULL ENABLE, 
	 PRIMARY KEY ("S_ID") ENABLE
   ) ;
CREATE TABLE  "SHOP" 
   (	"SHOP_ID" NUMBER(*,0) NOT NULL ENABLE, 
	"NAME" VARCHAR2(20) NOT NULL ENABLE, 
	"EMAIL" VARCHAR2(40) NOT NULL ENABLE, 
	"PHONE" VARCHAR2(10) NOT NULL ENABLE, 
	"SHOPADDRESS" VARCHAR2(40) NOT NULL ENABLE, 
	"S_ID" VARCHAR2(10) NOT NULL ENABLE, 
	"RATING" FLOAT(126), 
	 PRIMARY KEY ("SHOP_ID") ENABLE
   ) ;
CREATE TABLE  "HARDWARE" 
   (	"STOCK" NUMBER(*,0) NOT NULL ENABLE, 
	"PRICE" NUMBER(*,0) NOT NULL ENABLE, 
	"NAME" VARCHAR2(40) NOT NULL ENABLE, 
	"HARDWARE_ID" NUMBER(*,0) NOT NULL ENABLE, 
	"SHOP_ID" NUMBER(*,0) NOT NULL ENABLE, 
	 PRIMARY KEY ("HARDWARE_ID") ENABLE
   ) ;
CREATE TABLE  "ORDERS" 
   (	"ORDER_ID" NUMBER(*,0) NOT NULL ENABLE, 
	"ORDER_DATE" DATE NOT NULL ENABLE, 
	"CUST_ID" VARCHAR2(15) NOT NULL ENABLE, 
	"HARDWARE_ID" NUMBER(*,0) NOT NULL ENABLE, 
	"EMAIL" VARCHAR2(40) NOT NULL ENABLE, 
	"PHONE" NUMBER(*,0) NOT NULL ENABLE, 
	"SHOP_ID" NUMBER(*,0) NOT NULL ENABLE, 
	"STOCK" NUMBER(*,0) NOT NULL ENABLE, 
	"PRICE" FLOAT(126) NOT NULL ENABLE, 
	 PRIMARY KEY ("ORDER_ID") ENABLE
   ) ;
CREATE TABLE  "PURCHASE" 
   (	"PURCHASE_ID" NUMBER(*,0) NOT NULL ENABLE, 
	"PURCH_DATE" DATE NOT NULL ENABLE, 
	"CUST_ID" VARCHAR2(15) NOT NULL ENABLE, 
	"HARDWARE_ID" NUMBER(*,0) NOT NULL ENABLE, 
	"SHOP_ID" NUMBER(*,0) NOT NULL ENABLE, 
	"EMAIL" VARCHAR2(40) NOT NULL ENABLE, 
	"PHONE" NUMBER(*,0) NOT NULL ENABLE, 
	"ORDER_ID" NUMBER(*,0) NOT NULL ENABLE, 
	"STOCK" NUMBER(*,0) NOT NULL ENABLE, 
	"PRICE" FLOAT(126) NOT NULL ENABLE, 
	 PRIMARY KEY ("PURCHASE_ID") ENABLE
   ) ;
ALTER TABLE  "SHOP" ADD FOREIGN KEY ("S_ID")
	  REFERENCES  "SHOPKEEPER" ("S_ID") ON DELETE CASCADE ENABLE;
ALTER TABLE  "HARDWARE" ADD FOREIGN KEY ("SHOP_ID")
	  REFERENCES  "SHOP" ("SHOP_ID") ON DELETE CASCADE ENABLE;
ALTER TABLE  "ORDERS" ADD FOREIGN KEY ("CUST_ID", "EMAIL", "PHONE")
	  REFERENCES  "CUSTOMER" ("CUST_ID", "EMAIL", "PHONE") ON DELETE SET NULL ENABLE;
ALTER TABLE  "ORDERS" ADD FOREIGN KEY ("HARDWARE_ID")
	  REFERENCES  "HARDWARE" ("HARDWARE_ID") ON DELETE CASCADE ENABLE;
ALTER TABLE  "ORDERS" ADD FOREIGN KEY ("SHOP_ID")
	  REFERENCES  "SHOP" ("SHOP_ID") ON DELETE CASCADE ENABLE;
ALTER TABLE  "PURCHASE" ADD FOREIGN KEY ("CUST_ID", "EMAIL", "PHONE")
	  REFERENCES  "CUSTOMER" ("CUST_ID", "EMAIL", "PHONE") ON DELETE SET NULL ENABLE;
ALTER TABLE  "PURCHASE" ADD FOREIGN KEY ("HARDWARE_ID")
	  REFERENCES  "HARDWARE" ("HARDWARE_ID") ON DELETE CASCADE ENABLE;
ALTER TABLE  "PURCHASE" ADD FOREIGN KEY ("SHOP_ID")
	  REFERENCES  "SHOP" ("SHOP_ID") ON DELETE CASCADE ENABLE;

CREATE OR REPLACE PROCEDURE  "UPDATE_STOCK" 
(new_stock in int,hard_id in int)
is begin
update hardware set stock=new_stock where hardware_id=hard_id;
end;
/
/
CREATE OR REPLACE PROCEDURE  "UPDATE_PRICE" 
(new_price in int,hard_id in int)
is begin
update hardware set price=new_price where hardware_id=hard_id;
end;
/
/
CREATE OR REPLACE PROCEDURE  "TEST1" 
(quantity in int,hard_id in int)
is begin
update hardware set stock=stock-quantity where hardware_id=hard_id;
end;
/
/


CREATE OR REPLACE TRIGGER  "UPDATE_ORDER_TOTAL" 
after insert or update or delete on demo_order_items
begin

-- Update the Order Total when any order item is changed

update demo_orders set order_total =
  (select sum(unit_price*quantity) from demo_order_items
    where demo_order_items.order_id = demo_orders.order_id);
end;
/
ALTER TRIGGER  "UPDATE_ORDER_TOTAL" ENABLE;CREATE OR REPLACE TRIGGER  "PREVENTUPDATE" 
AFTER
update of "STOCK" on "HARDWARE"
for each row
begin
if(:new.stock<0)
then
raise_application_error (-20001,'Order cannot be acknowldeged');
end if;
end;
/
ALTER TRIGGER  "PREVENTUPDATE" ENABLE;
